# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#   start in background  docker-compose up -d
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
version: "3.7"

volumes:
  db_data:

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}

services:
  app:
    image: dragonli:latest
    container_name: dragonli
    build:
      context: .
    environment:
      <<: *shared_environment
      TZ: Asia/Shanghai
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - ./Database:/app/Database
      - ./Public:/app/Public
      - ./Resources:/app/Resources
      - ./Uploads:/app/Uploads
      - ./certs:/app/certs
      - ./Template:/app/Template
    command:
      [
        "serve",
        "--env",
        "production",
        "--hostname",
        "0.0.0.0",
        "--port",
        "13134",
      ]
  migrate:
    image: dragonli:latest
    build:
      context: .
    environment:
      <<: *shared_environment
      TZ: Asia/Shanghai
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
  revert:
    image: dragonli:latest
    build:
      context: .
    environment:
      <<: *shared_environment
      TZ: Asia/Shanghai
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    depends_on:
      - app
    volumes:
      - ./certs:/etc/nginx/certs
      - ./config:/etc/nginx/conf.d

networks:
  app-network:
    driver: bridge
